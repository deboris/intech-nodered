module.exports = function(RED) {
  function Intech_protocol_read(config) {
    RED.nodes.createNode(this,config);
    var context = this.context();
    var dataValue;
    const get = require('simple-get');
    this.topic = config.topic;
    this.ip = config.ip;
    this.slave = config.slave;
    this.regini = config.regini;
    this.quant = config.quant;
    this.repeat = config.repeat;
    var node = this;


  //  node.on('input', function(msg) {


      //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
      //remove chaves da passagem de parametro do objeto
      //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
      function removeMustaches(str) {
        var stringT = str
        stringT = stringT.split('{').join('')
        stringT = stringT.split('}').join('')
        return stringT
      }
      //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
      //Verifica origem do parametro
      //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
      function sourceParameter(msg,value) {
        var valueR
        if (isNaN(value)){
          if (value.indexOf("{") >= 0){
            valueR = msg[removeMustaches(value)];
          }else{
            valueR = value;
          }
        }else{
          valueR = value;
        }
        return valueR
      }

      function updateread(msg){

        //console.log(this.repeat);

      const GET_CONFIG = {
        method: 'GET',
        url: "http://"+ sourceParameter(msg,node.ip) +"/api/modbusread/"+ sourceParameter(msg,node.slave) +"/"+ sourceParameter(msg,node.regini) +"/"+ sourceParameter(msg,node.quant) +"",
        body: {
          key: 'value'
        },
        json: true
      }
      //console.log(node.ip);
      node.status({fill:"yellow",shape:"ring",text:"executando..."});
      get.concat(GET_CONFIG, function (err, res, data) {
        if(err){
          dataValue = err;
          var outMsg = {topic:node.topic, payload: dataValue};
          node.status({fill:"red",shape:"dot",text:"erro na leitura"});
          node.send(outMsg);
        }else{
          dataValue = data;
          if (dataValue.length > 1) {
            var outMsg = {topic:node.topic, payload: dataValue};
            node.send(outMsg);
          }else {
            var outMsg = {topic:node.topic, payload: dataValue[0]};
            node.send(outMsg);
          }
          node.status({fill:"green",shape:"dot",text:"leitura ok"});
        }
      })

}
      this.interval_id = setInterval(updateread,node.repeat);



    //});
  }
  RED.nodes.registerType("Intech protocol read",Intech_protocol_read);

  Intech_protocol_read.prototype.close = function(){
		if (this.interval_id != null)
		{
      console.log("limpei");
			clearInterval(this.interval_id);
		}
	}
};
